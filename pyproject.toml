[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "dilib"
dynamic = ["version"]
description = "Dependency injection (DI) library for Python"
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.8"
keywords = [
    "dependency injection",
    "di",
    "inversion of control",
    "ioc",
    "design patterns",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Software Development :: Libraries",
    "Topic :: Utilities",
]

dependencies = ["typing_extensions>=4.4.0"]

[project.urls]
"Homepage" = "https://github.com/ansatzcapital/dilib"
"Documentation" = "https://ansatzcapital.github.io/dilib"
"Packaging" = "https://pypi.org/project/dilib"
"Source" = "https://github.com/ansatzcapital/dilib"
"Tracker" = "https://github.com/ansatzcapital/dilib/issues"

[dependency-groups]
common = [
    "hatch>=1.14.1,<2",
    "hatchling>=1.27.0",
    "hatch-vcs>=0.4.0",
    "rust-just>=1.43.0,<2",
]
build = [
    "twine>=4.0.2",
    "uv>=0.8.0",
]
docs = [
    "myst-parser>=3.0.0",
    "pydata-sphinx-theme>=0.14.0",
    "sphinx>=7.0.0",
    "sphinx-copybutton>=0.5.2",
]
# Collapse to `test` when https://github.com/prefix-dev/pixi/pull/4729
# is released.
test-common = [
    "mypy>=1.14.0,<1.15",
    "pytest>=7.4.4",
    "pytest-xdist>=3.5.0",
    "pyright>=1.1.406,<1.1.407",
    "ruff>=0.1.8",
]
test = [
    { include-group = "common" },
    { include-group = "test-common" },
]
dev = [
    { include-group = "common" },
    { include-group = "build" },
    { include-group = "docs" },
    { include-group = "test-common" },
]

[tool.hatch.version]
# See https://github.com/ofek/hatch-vcs.
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "dilib/version.py"

[tool.pixi.workspace]
channels = ["conda-forge"]
platforms = ["win-64", "linux-64", "osx-64", "osx-arm64"]

[tool.pixi.feature.dev.dependencies]
act = ">=0.2.82,<0.3"

[tool.pixi.feature.local-dev.pypi-dependencies]
dilib = { path = ".", editable = true }

[tool.pixi.feature.py38.dependencies]
python = "~=3.8.0"

[tool.pixi.feature.py39.dependencies]
python = "~=3.9.0"

[tool.pixi.feature.py310.dependencies]
python = "~=3.10.0"

[tool.pixi.feature.py311.dependencies]
python = "~=3.11.0"

[tool.pixi.feature.py312.dependencies]
python = "~=3.12.0"

[tool.pixi.feature.py313.dependencies]
python = "~=3.13.0"

[tool.pixi.feature.py314.dependencies]
python = "~=3.14.0"

[tool.pixi.environments]
default = { solve-group = "default" }

dev = { features = ["local-dev", "dev", "py313"], solve-group = "default" }

test-py38 = { features = [
    "local-dev",
    "test",
    "py38",
], solve-group = "test-py38" }

test-py39 = { features = [
    "local-dev",
    "test",
    "py39",
], solve-group = "test-py39" }

test-py310 = { features = [
    "local-dev",
    "test",
    "py310",
], solve-group = "test-py310" }

test-py311 = { features = [
    "local-dev",
    "test",
    "py311",
], solve-group = "test-py311" }

test-py312 = { features = [
    "local-dev",
    "test",
    "py312",
], solve-group = "test-py312" }

test-py313 = { features = [
    "local-dev",
    "test",
    "py313",
], solve-group = "test-py313" }

test-py314 = { features = [
    "local-dev",
    "test",
    "py314",
], solve-group = "test-py314" }

[tool.mypy]
# Adapted from https://careers.wolt.com/en/blog/tech/professional-grade-mypy-configuration
# and https://justincaustin.com/blog/mypy-tips-and-tricks/.
disallow_untyped_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_return_any = true
show_error_codes = true
warn_unused_ignores = true
disallow_any_generics = true
disallow_incomplete_defs = true
# Many third-party libraries are not properly typed.
# disallow_untyped_calls = true
# disallow_untyped_decorators = true
follow_imports = "normal"
ignore_missing_imports = true
# Many third-party libraries don't explicitly export public API.
# no_implicit_reexport = true
# Aesthetic preference.
# show_error_context = true
strict_equality = true
strict_optional = true
warn_redundant_casts = true

# See https://mypy-lang.blogspot.com/2023/08/mypy-15-released.html
enable_error_code = ["explicit-override"]

# See https://mypy-lang.blogspot.com/2025/05/mypy-116-released.html.
exclude_gitignore = true

disable_error_code = [
    # See https://github.com/python/mypy/issues/4717.
    "type-abstract",
]

exclude = "build|docs/build"

[tool.pyright]
include = ["**/*.py"]
exclude = ["**/__pycache__", "**/.*"]
# To enable strict mode:
# strict = ["**/*.py"]
# Many third-party libraries don't explicitly export public API
reportPrivateImportUsage = "none"
reportUnnecessaryTypeIgnoreComment = true

[tool.pytest.ini_options]
addopts = "--doctest-modules --durations 10 -s"
filterwarnings = []
markers = ["slow"]

[tool.ruff]
target-version = "py38"
line-length = 79

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pixi",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "version.py",
]

[tool.ruff.format]
# https://docs.astral.sh/ruff/formatter/
quote-style = "double"
indent-style = "space"

[tool.ruff.lint]
select = [
    # https://beta.ruff.rs/docs/rules/#pyflakes-f
    "F",
    # https://beta.ruff.rs/docs/rules/#pycodestyle-e-w
    "E",
    "W",
    # https://beta.ruff.rs/docs/rules/#mccabe-c90
    "C90",
    # https://beta.ruff.rs/docs/rules/#isort-i
    "I",
    # https://beta.ruff.rs/docs/rules/#pep8-naming-n
    "N",
    # https://beta.ruff.rs/docs/rules/#pydocstyle-d
    "D",
    # https://beta.ruff.rs/docs/rules/#pyupgrade-up
    "UP",
    # https://beta.ruff.rs/docs/rules/#flake8-annotations-ann
    "ANN",
    # https://beta.ruff.rs/docs/rules/#flake8-blind-except-ble
    "BLE",
    # https://beta.ruff.rs/docs/rules/#flake8-bugbear-b
    "B",
    # https://beta.ruff.rs/docs/rules/#flake8-builtins-a
    "A",
]

ignore = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D107",
    "D417",
    "ANN401",
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.isort]
force-sort-within-sections = true
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]
single-line-exclusions = ["collections.abc", "typing", "typing_extensions"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "google"
